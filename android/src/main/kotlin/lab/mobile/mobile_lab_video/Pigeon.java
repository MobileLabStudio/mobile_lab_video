// Autogenerated from Pigeon (v4.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package lab.mobile.mobile_lab_video;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum VideoPlayerError {
    UNKNOWN(0),
    SERVER_DIED(1),
    IO(2),
    MALFORMED(3),
    UNSUPPORTED(4),
    TIMED_OUT(5),
    SYSTEM(6);

    private int index;
    private VideoPlayerError(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VideoDetails {
    private @NonNull Long width;
    public @NonNull Long getWidth() { return width; }
    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;
    public @NonNull Long getHeight() { return height; }
    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    private @NonNull Long surfaceId;
    public @NonNull Long getSurfaceId() { return surfaceId; }
    public void setSurfaceId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"surfaceId\" is null.");
      }
      this.surfaceId = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private VideoDetails() {}
    public static final class Builder {
      private @Nullable Long width;
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }
      private @Nullable Long height;
      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }
      private @Nullable Long surfaceId;
      public @NonNull Builder setSurfaceId(@NonNull Long setterArg) {
        this.surfaceId = setterArg;
        return this;
      }
      public @NonNull VideoDetails build() {
        VideoDetails pigeonReturn = new VideoDetails();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setSurfaceId(surfaceId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("surfaceId", surfaceId);
      return toMapResult;
    }
    static @NonNull VideoDetails fromMap(@NonNull Map<String, Object> map) {
      VideoDetails pigeonResult = new VideoDetails();
      Object width = map.get("width");
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width));
      Object height = map.get("height");
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height));
      Object surfaceId = map.get("surfaceId");
      pigeonResult.setSurfaceId((surfaceId == null) ? null : ((surfaceId instanceof Integer) ? (Integer)surfaceId : (Long)surfaceId));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class VideoPlayerApiCodec extends StandardMessageCodec {
    public static final VideoPlayerApiCodec INSTANCE = new VideoPlayerApiCodec();
    private VideoPlayerApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return VideoDetails.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof VideoDetails) {
        stream.write(128);
        writeValue(stream, ((VideoDetails) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPlayerApi {
    void prepare(Result<VideoDetails> result);
    void play();
    void pause();
    void release();
    void seekTo(@NonNull Long milliseconds);
    void reset();
    @NonNull Boolean isPlaying();

    /** The codec used by VideoPlayerApi. */
    static MessageCodec<Object> getCodec() {
      return       VideoPlayerApiCodec.INSTANCE;    }
    /**Sets up an instance of `VideoPlayerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPlayerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.prepare", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<VideoDetails> resultCallback = new Result<VideoDetails>() {
                public void success(VideoDetails result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.prepare(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.play();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.pause();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.release", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.release();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number millisecondsArg = (Number)args.get(0);
              if (millisecondsArg == null) {
                throw new NullPointerException("millisecondsArg unexpectedly null.");
              }
              api.seekTo((millisecondsArg == null) ? null : millisecondsArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.reset", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.reset();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerApi.isPlaying", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isPlaying();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class VideoPlayerDelegateApiCodec extends StandardMessageCodec {
    public static final VideoPlayerDelegateApiCodec INSTANCE = new VideoPlayerDelegateApiCodec();
    private VideoPlayerDelegateApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return VideoDetails.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof VideoDetails) {
        stream.write(128);
        writeValue(stream, ((VideoDetails) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPlayerDelegateApi {
    @NonNull String create(@NonNull String uri);
    void prepare(@NonNull String playerId, Result<VideoDetails> result);
    void play(@NonNull String playerId);
    void pause(@NonNull String playerId);
    void release(@NonNull String playerId);
    void seekTo(@NonNull Long milliseconds, @NonNull String playerId);
    void reset(@NonNull String playerId);
    void isPlaying(@NonNull String playerId, Result<Boolean> result);
    void releaseAll();

    /** The codec used by VideoPlayerDelegateApi. */
    static MessageCodec<Object> getCodec() {
      return       VideoPlayerDelegateApiCodec.INSTANCE;    }
    /**Sets up an instance of `VideoPlayerDelegateApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPlayerDelegateApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uriArg = (String)args.get(0);
              if (uriArg == null) {
                throw new NullPointerException("uriArg unexpectedly null.");
              }
              String output = api.create(uriArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.prepare", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              Result<VideoDetails> resultCallback = new Result<VideoDetails>() {
                public void success(VideoDetails result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.prepare(playerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              api.play(playerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              api.pause(playerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.release", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              api.release(playerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number millisecondsArg = (Number)args.get(0);
              if (millisecondsArg == null) {
                throw new NullPointerException("millisecondsArg unexpectedly null.");
              }
              String playerIdArg = (String)args.get(1);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              api.seekTo((millisecondsArg == null) ? null : millisecondsArg.longValue(), playerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.reset", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              api.reset(playerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.isPlaying", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String playerIdArg = (String)args.get(0);
              if (playerIdArg == null) {
                throw new NullPointerException("playerIdArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.isPlaying(playerIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.releaseAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.releaseAll();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterVideoPlayerApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterVideoPlayerApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterVideoPlayerApi. */
    static MessageCodec<Object> getCodec() {
      return       new StandardMessageCodec();
    }
    /**
     * Called when player enters error state.
     * The [error] param is index of the [VideoPlayerError] enum.
     * The [nativePlayerInfo] is info about player which enters error state
     */
    public void onError(@NonNull Long errorArg, @NonNull Long surfaceIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onError", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorArg, surfaceIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    /** Called when player buffer updates */
    public void onBuffering(@NonNull Long percentArg, @NonNull Long surfaceIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onBuffering", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(percentArg, surfaceIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    /** Called when media completes */
    public void onCompleted(@NonNull Long surfaceIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onCompleted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(surfaceIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    /** Called when player was prepared */
    public void onPrepared(@NonNull Long surfaceIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onPrepared", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(surfaceIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
