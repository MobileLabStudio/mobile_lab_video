// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package lab.mobile.mobile_lab_video;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum VideoPlayerError {
    UNKNOWN(0),
    SERVER_DIED(1),
    IO(2),
    MALFORMED(3),
    UNSUPPORTED(4),
    TIMED_OUT(5),
    SYSTEM(6);

    final int index;

    private VideoPlayerError(final int index) {
      this.index = index;
    }
  }

  public enum PMediaPlayerState {
    READY(0),
    BUFFERING(1),
    ENDED(2),
    IDLE(3);

    final int index;

    private PMediaPlayerState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoDetails {
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    private @NonNull Long surfaceId;

    public @NonNull Long getSurfaceId() {
      return surfaceId;
    }

    public void setSurfaceId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"surfaceId\" is null.");
      }
      this.surfaceId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    VideoDetails() {}

    public static final class Builder {

      private @Nullable Long width;

      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Long surfaceId;

      public @NonNull Builder setSurfaceId(@NonNull Long setterArg) {
        this.surfaceId = setterArg;
        return this;
      }

      public @NonNull VideoDetails build() {
        VideoDetails pigeonReturn = new VideoDetails();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setSurfaceId(surfaceId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(surfaceId);
      return toListResult;
    }

    static @NonNull VideoDetails fromList(@NonNull ArrayList<Object> list) {
      VideoDetails pigeonResult = new VideoDetails();
      Object width = list.get(0);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(1);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      Object surfaceId = list.get(2);
      pigeonResult.setSurfaceId((surfaceId == null) ? null : ((surfaceId instanceof Integer) ? (Integer) surfaceId : (Long) surfaceId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PMediaPlayerInfo {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PMediaPlayerInfo() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      public @NonNull PMediaPlayerInfo build() {
        PMediaPlayerInfo pigeonReturn = new PMediaPlayerInfo();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(textureId);
      return toListResult;
    }

    static @NonNull PMediaPlayerInfo fromList(@NonNull ArrayList<Object> list) {
      PMediaPlayerInfo pigeonResult = new PMediaPlayerInfo();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PVideoMeta {
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PVideoMeta() {}

    public static final class Builder {

      private @Nullable Long width;

      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull PVideoMeta build() {
        PVideoMeta pigeonReturn = new PVideoMeta();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull PVideoMeta fromList(@NonNull ArrayList<Object> list) {
      PVideoMeta pigeonResult = new PVideoMeta();
      Object width = list.get(0);
      pigeonResult.setWidth((width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = list.get(1);
      pigeonResult.setHeight((height == null) ? null : ((height instanceof Integer) ? (Integer) height : (Long) height));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PMediaPlayerStateEvent {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull PMediaPlayerState state;

    public @NonNull PMediaPlayerState getState() {
      return state;
    }

    public void setState(@NonNull PMediaPlayerState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PMediaPlayerStateEvent() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable PMediaPlayerState state;

      public @NonNull Builder setState(@NonNull PMediaPlayerState setterArg) {
        this.state = setterArg;
        return this;
      }

      public @NonNull PMediaPlayerStateEvent build() {
        PMediaPlayerStateEvent pigeonReturn = new PMediaPlayerStateEvent();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(textureId);
      toListResult.add(state == null ? null : state.index);
      return toListResult;
    }

    static @NonNull PMediaPlayerStateEvent fromList(@NonNull ArrayList<Object> list) {
      PMediaPlayerStateEvent pigeonResult = new PMediaPlayerStateEvent();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object state = list.get(1);
      pigeonResult.setState(state == null ? null : PMediaPlayerState.values()[(int) state]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PMediaPlayerNaviteError {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull Map<String, Object> details;

    public @NonNull Map<String, Object> getDetails() {
      return details;
    }

    public void setDetails(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"details\" is null.");
      }
      this.details = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PMediaPlayerNaviteError() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> details;

      public @NonNull Builder setDetails(@NonNull Map<String, Object> setterArg) {
        this.details = setterArg;
        return this;
      }

      public @NonNull PMediaPlayerNaviteError build() {
        PMediaPlayerNaviteError pigeonReturn = new PMediaPlayerNaviteError();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setDetails(details);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(textureId);
      toListResult.add(details);
      return toListResult;
    }

    static @NonNull PMediaPlayerNaviteError fromList(@NonNull ArrayList<Object> list) {
      PMediaPlayerNaviteError pigeonResult = new PMediaPlayerNaviteError();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object details = list.get(1);
      pigeonResult.setDetails((Map<String, Object>) details);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class VideoPlayerDelegateApiCodec extends StandardMessageCodec {
    public static final VideoPlayerDelegateApiCodec INSTANCE = new VideoPlayerDelegateApiCodec();

    private VideoPlayerDelegateApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return VideoDetails.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof VideoDetails) {
        stream.write(128);
        writeValue(stream, ((VideoDetails) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPlayerDelegateApi {

    @NonNull 
    String create(@NonNull String uri);

    void prepare(@NonNull String playerId, @NonNull Result<VideoDetails> result);

    void play(@NonNull String playerId);

    void pause(@NonNull String playerId);

    void release(@NonNull String playerId);

    void seekTo(@NonNull Long milliseconds, @NonNull String playerId);

    void reset(@NonNull String playerId);

    void isPlaying(@NonNull String playerId, @NonNull Result<Boolean> result);

    void releaseAll();

    /** The codec used by VideoPlayerDelegateApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return VideoPlayerDelegateApiCodec.INSTANCE;
    }
    /**Sets up an instance of `VideoPlayerDelegateApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable VideoPlayerDelegateApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uriArg = (String) args.get(0);
                try {
                  String output = api.create(uriArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.prepare", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Result<VideoDetails> resultCallback =
                    new Result<VideoDetails>() {
                      public void success(VideoDetails result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.prepare(playerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.play(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.pause(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.release", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.release(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number millisecondsArg = (Number) args.get(0);
                String playerIdArg = (String) args.get(1);
                try {
                  api.seekTo((millisecondsArg == null) ? null : millisecondsArg.longValue(), playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.reset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.reset(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.isPlaying", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isPlaying(playerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPlayerDelegateApi.releaseAll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.releaseAll();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterVideoPlayerApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public FlutterVideoPlayerApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterVideoPlayerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**
     * Called when player enters error state.
     * The [error] param is index of the [VideoPlayerError] enum.
     * The [nativePlayerInfo] is info about player which enters error state
     */
    public void onError(@NonNull Long errorArg, @NonNull Long surfaceIdArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onError", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(errorArg, surfaceIdArg)),
          channelReply -> callback.reply(null));
    }
    /** Called when player buffer updates */
    public void onBuffering(@NonNull Long percentArg, @NonNull Long surfaceIdArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onBuffering", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(percentArg, surfaceIdArg)),
          channelReply -> callback.reply(null));
    }
    /** Called when media completes */
    public void onCompleted(@NonNull Long surfaceIdArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onCompleted", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(surfaceIdArg)),
          channelReply -> callback.reply(null));
    }
    /** Called when player was prepared */
    public void onPrepared(@NonNull Long surfaceIdArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterVideoPlayerApi.onPrepared", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(surfaceIdArg)),
          channelReply -> callback.reply(null));
    }
  }

  private static class PMediaPlayerFactoryCodec extends StandardMessageCodec {
    public static final PMediaPlayerFactoryCodec INSTANCE = new PMediaPlayerFactoryCodec();

    private PMediaPlayerFactoryCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PMediaPlayerInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PMediaPlayerInfo) {
        stream.write(128);
        writeValue(stream, ((PMediaPlayerInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PMediaPlayerFactory {

    void createHttpVideoPlayer(@NonNull String httpUrl, @Nullable String tag, @NonNull Result<PMediaPlayerInfo> result);

    void createHLSVideoStream(@NonNull String hlsUrl, @Nullable String tag, @NonNull Result<PMediaPlayerInfo> result);

    /** The codec used by PMediaPlayerFactory. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PMediaPlayerFactoryCodec.INSTANCE;
    }
    /**Sets up an instance of `PMediaPlayerFactory` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PMediaPlayerFactory api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerFactory.createHttpVideoPlayer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String httpUrlArg = (String) args.get(0);
                String tagArg = (String) args.get(1);
                Result<PMediaPlayerInfo> resultCallback =
                    new Result<PMediaPlayerInfo>() {
                      public void success(PMediaPlayerInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createHttpVideoPlayer(httpUrlArg, tagArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerFactory.createHLSVideoStream", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String hlsUrlArg = (String) args.get(0);
                String tagArg = (String) args.get(1);
                Result<PMediaPlayerInfo> resultCallback =
                    new Result<PMediaPlayerInfo>() {
                      public void success(PMediaPlayerInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createHLSVideoStream(hlsUrlArg, tagArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PMediaPlayerCodec extends StandardMessageCodec {
    public static final PMediaPlayerCodec INSTANCE = new PMediaPlayerCodec();

    private PMediaPlayerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PVideoMeta.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PVideoMeta) {
        stream.write(128);
        writeValue(stream, ((PVideoMeta) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PMediaPlayer {

    void prepare();

    void play();

    void pause();

    void playPause();

    void seekTo(@NonNull Long millisecond);

    void reuse();

    void release();

    @NonNull 
    PVideoMeta getVideoMeta();

    /** The codec used by PMediaPlayer. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PMediaPlayerCodec.INSTANCE;
    }
    /**Sets up an instance of `PMediaPlayer` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PMediaPlayer api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.prepare", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.prepare();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.play();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.pause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.playPause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.playPause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number millisecondArg = (Number) args.get(0);
                try {
                  api.seekTo((millisecondArg == null) ? null : millisecondArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.reuse", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.reuse();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.release", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.release();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayer.getVideoMeta", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PVideoMeta output = api.getVideoMeta();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PMediaPlayerProxyCodec extends StandardMessageCodec {
    public static final PMediaPlayerProxyCodec INSTANCE = new PMediaPlayerProxyCodec();

    private PMediaPlayerProxyCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PMediaPlayerInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PVideoMeta.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PMediaPlayerInfo) {
        stream.write(128);
        writeValue(stream, ((PMediaPlayerInfo) value).toList());
      } else if (value instanceof PVideoMeta) {
        stream.write(129);
        writeValue(stream, ((PVideoMeta) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PMediaPlayerProxy {

    void prepare(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    void play(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    void pause(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    void playPause(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    void seekTo(@NonNull PMediaPlayerInfo mediaPlayerInfo, @NonNull Long millisecond);

    void reuse(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    void release(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    @NonNull 
    PVideoMeta getVideoMeta(@NonNull PMediaPlayerInfo mediaPlayerInfo);

    /** The codec used by PMediaPlayerProxy. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PMediaPlayerProxyCodec.INSTANCE;
    }
    /**Sets up an instance of `PMediaPlayerProxy` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PMediaPlayerProxy api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.prepare", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.prepare(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.play(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.pause(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.playPause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.playPause(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.seekTo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                Number millisecondArg = (Number) args.get(1);
                try {
                  api.seekTo(mediaPlayerInfoArg, (millisecondArg == null) ? null : millisecondArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.reuse", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.reuse(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.release", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  api.release(mediaPlayerInfoArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PMediaPlayerProxy.getVideoMeta", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PMediaPlayerInfo mediaPlayerInfoArg = (PMediaPlayerInfo) args.get(0);
                try {
                  PVideoMeta output = api.getVideoMeta(mediaPlayerInfoArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PMediaPlayerListenerCodec extends StandardMessageCodec {
    public static final PMediaPlayerListenerCodec INSTANCE = new PMediaPlayerListenerCodec();

    private PMediaPlayerListenerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PMediaPlayerNaviteError.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PMediaPlayerStateEvent.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PMediaPlayerNaviteError) {
        stream.write(128);
        writeValue(stream, ((PMediaPlayerNaviteError) value).toList());
      } else if (value instanceof PMediaPlayerStateEvent) {
        stream.write(129);
        writeValue(stream, ((PMediaPlayerStateEvent) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class PMediaPlayerListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public PMediaPlayerListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PMediaPlayerListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PMediaPlayerListenerCodec.INSTANCE;
    }
    public void onStateChanged(@NonNull PMediaPlayerStateEvent stateEventArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PMediaPlayerListener.onStateChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(stateEventArg)),
          channelReply -> callback.reply(null));
    }
    public void onError(@NonNull PMediaPlayerNaviteError naviteErrorArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PMediaPlayerListener.onError", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(naviteErrorArg)),
          channelReply -> callback.reply(null));
    }
  }
}
